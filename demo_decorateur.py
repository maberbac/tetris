"""
D√©monstration du fonctionnement du d√©corateur @piece_tetris.

Ce script montre √©tape par √©tape comment l'auto-enregistrement fonctionne.
"""

# Simulons le processus step-by-step
print("üéØ D√âMONSTRATION DU D√âCORATEUR @piece_tetris")
print("=" * 50)

# 1. Avant l'importation de PieceI
from src.domaine.entites.fabriques.registre_pieces import RegistrePieces
from src.domaine.entites.piece import TypePiece

print("1Ô∏è‚É£ √âtat initial du registre :")
print(f"   Pi√®ces enregistr√©es: {len(RegistrePieces.obtenir_types_supportes())}")
print(f"   Types: {[t.value for t in RegistrePieces.obtenir_types_supportes()]}")

print("\n2Ô∏è‚É£ Importation de PieceI (d√©corateur s'ex√©cute) :")
print("   @piece_tetris(TypePiece.I) s'ex√©cute automatiquement...")

# 2. L'importation d√©clenche l'auto-enregistrement
from src.domaine.entites.pieces.piece_i import PieceI

print(f"   ‚úÖ PieceI maintenant enregistr√©e !")

print("\n3Ô∏è‚É£ √âtat apr√®s importation :")
print(f"   Pi√®ces enregistr√©es: {len(RegistrePieces.obtenir_types_supportes())}")
print(f"   Types: {[t.value for t in RegistrePieces.obtenir_types_supportes()]}")

print("\n4Ô∏è‚É£ V√©rification du mapping :")
classe_obtenue = RegistrePieces.obtenir_classe_piece(TypePiece.I)
print(f"   TypePiece.I ‚Üí {classe_obtenue.__name__}")
print(f"   C'est bien PieceI ? {classe_obtenue == PieceI}")

print("\nüéâ MAGIE ACCOMPLIE !")
print("   La pi√®ce s'est enregistr√©e automatiquement lors de l'importation !")
