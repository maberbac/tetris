"""
Tests d'Acceptance - Bug Visuel Ligne Compl√®te
==============================================
Nature : Test d'acceptance pour correction bug utilisateur  
Scenario : L'utilisateur voit une ligne grise qui n'est pas d√©truite (bug visuel)
M√©thode : TDD (Test-Driven Development)

Bug identifi√© : Timing entre placement de pi√®ce et suppression de ligne
                ‚Üí La ligne compl√®te appara√Æt grise pendant un frame

Comportement attendu : Aucune ligne compl√®te ne doit jamais √™tre visible √† l'utilisateur
"""

import unittest
import sys
sys.path.append('.')

from src.domaine.services.moteur_partie import MoteurPartie
from src.domaine.entites.position import Position
from src.domaine.entites.piece import TypePiece


class TestBugVisuelLigneComplete(unittest.TestCase):
    """Tests sp√©cifiques pour le bug visuel de ligne compl√®te"""
    
    def setUp(self):
        """Configuration pour chaque test"""
        self.moteur = MoteurPartie()
    
    def test_placement_piece_supprime_ligne_immediatement(self):
        """GREEN: Quand une pi√®ce cr√©e une ligne compl√®te, elle doit √™tre supprim√©e imm√©diatement"""
        # Arrange : Pr√©parer une ligne presque compl√®te
        plateau = self.moteur.obtenir_plateau()
        
        # Remplir 8 cellules de la ligne 19 (derni√®re ligne) 
        for x in range(8):
            pos = Position(x, 19)
            plateau._positions_occupees.add(pos)
        
        # Cr√©er une pi√®ce O qui va compl√©ter la ligne en (8,18) -> positions (8,18), (9,18), (8,19), (9,19)
        from src.domaine.entites.pieces.piece_o import PieceO
        piece_o = PieceO.creer(8, 18)  # Carr√© 2x2 qui compl√©tera la ligne 19
        
        # Forcer la pi√®ce dans le moteur
        self.moteur.piece_active = piece_o
        
        # Act : Placer la pi√®ce (ce qui devrait d√©clencher suppression imm√©diate)
        positions_avant = len(plateau.positions_occupees)
        resultat = self.moteur.placer_piece_et_generer_nouvelle()
        
        # Assert : La ligne doit avoir √©t√© supprim√©e
        self.assertTrue(resultat, "Le placement doit r√©ussir")
        lignes_completes = plateau.obtenir_lignes_completes()
        
        # Si la ligne compl√®te √©tait supprim√©e imm√©diatement, il ne devrait plus y avoir de ligne compl√®te
        self.assertEqual(lignes_completes, [], 
                        "Une ligne compl√®te ne devrait jamais √™tre visible apr√®s placement")
        
        # V√©rifier que la ligne a bien √©t√© supprim√©e
        positions_apres = len(plateau.positions_occupees)
        # positions_avant (8) + piece_o (4) - ligne_supprimee (10) = positions_avant - 6
        self.assertEqual(positions_apres, positions_avant - 6,
                       "La ligne compl√®te devrait √™tre supprim√©e imm√©diatement")
    
    def test_etat_plateau_coherent_apres_placement(self):
        """RED: L'√©tat du plateau doit √™tre coh√©rent - pas de ligne compl√®te r√©siduelle"""
        # Arrange : Cr√©er un sc√©nario de ligne compl√®te
        plateau = self.moteur.obtenir_plateau()
        
        # Remplir compl√®tement la derni√®re ligne
        for x in range(10):
            pos = Position(x, 19)
            plateau._positions_occupees.add(pos)
        
        positions_initiales = plateau.positions_occupees.copy()
        
        # Act : Simuler la d√©tection et suppression
        lignes_completes = plateau.obtenir_lignes_completes()
        if lignes_completes:
            plateau.supprimer_lignes(lignes_completes)
        
        # Assert : Plus aucune ligne compl√®te ne doit exister
        lignes_apres_suppression = plateau.obtenir_lignes_completes()
        self.assertEqual(lignes_apres_suppression, [], 
                        "Aucune ligne compl√®te ne doit subsister apr√®s suppression")
        
        # V√©rifier qu'il n'y a plus de cellules en ligne 19
        cellules_ligne_19 = [pos for pos in plateau.positions_occupees if pos.y == 19]
        self.assertEqual(len(cellules_ligne_19), 0,
                        "La ligne 19 doit √™tre compl√®tement vide apr√®s suppression")
    
    def test_moteur_ne_laisse_jamais_ligne_complete_visible(self):
        """GREEN: Le moteur ne doit jamais laisser une ligne compl√®te visible dans son √©tat final"""
        # Arrange : Cr√©er un sc√©nario complexe avec plusieurs lignes
        plateau = self.moteur.obtenir_plateau()
        
        # Cr√©er 2 lignes compl√®tes cons√©cutives
        for y in [18, 19]:  # Deux derni√®res lignes
            for x in range(10):
                pos = Position(x, y)
                plateau._positions_occupees.add(pos)
        
        # Ajouter une ligne compl√®te au-dessus qui va descendre apr√®s suppression
        for x in range(10):  # Ligne 17 compl√®te qui va devenir ligne 19 apr√®s suppression
            pos = Position(x, 17)
            plateau._positions_occupees.add(pos)
        
        # Act : Supprimer les lignes compl√®tes en plusieurs fois pour simuler le probl√®me
        lignes_completes = plateau.obtenir_lignes_completes()
        if lignes_completes:
            nb_supprimees = plateau.supprimer_lignes(lignes_completes)
            self.moteur.stats.ajouter_score_selon_lignes_completees(nb_supprimees)
            
            # V√©rifier imm√©diatement s'il y a de nouvelles lignes compl√®tes apr√®s descente
            nouvelles_lignes_completes = plateau.obtenir_lignes_completes()
            if nouvelles_lignes_completes:
                # Supprimer ces nouvelles lignes compl√®tes aussi
                plateau.supprimer_lignes(nouvelles_lignes_completes)
        
        # Assert : √âtat final coh√©rent
        lignes_finales = plateau.obtenir_lignes_completes()
        self.assertEqual(lignes_finales, [],
                        "Le moteur ne doit jamais laisser de lignes compl√®tes dans l'√©tat final")
        
        # V√©rifier que le plateau n'a plus que les bonnes cellules
        positions_restantes = len(plateau.positions_occupees)
        self.assertEqual(positions_restantes, 0,  # Toutes les lignes compl√®tes ont √©t√© supprim√©es
                        "Toutes les lignes compl√®tes devraient avoir √©t√© supprim√©es")
    
    def test_atomicite_placement_et_suppression(self):
        """GREEN: Le placement d'une pi√®ce et la suppression de lignes doivent √™tre atomiques"""
        # Arrange
        plateau = self.moteur.obtenir_plateau()
        
        # Cr√©er une ligne presque compl√®te
        for x in range(8):  # 8 cellules sur 10
            pos = Position(x, 19)
            plateau._positions_occupees.add(pos)
        
        # Cr√©er une pi√®ce O qui va compl√©ter la ligne quand plac√©e en (8, 18)
        from src.domaine.entites.pieces.piece_o import PieceO
        piece_o = PieceO.creer(8, 18)  # Carr√© 2x2 qui compl√©tera la ligne 19
        
        # Act : Utiliser la nouvelle m√©thode atomique
        nb_lignes_supprimees = plateau.placer_piece_et_supprimer_lignes(piece_o)
        
        # Assert : V√©rifier qu'aucune ligne compl√®te n'est visible apr√®s l'op√©ration atomique
        lignes_finales = plateau.obtenir_lignes_completes()
        self.assertEqual(lignes_finales, [],
                        "Apr√®s l'op√©ration atomique, aucune ligne compl√®te ne doit √™tre visible")
        self.assertEqual(nb_lignes_supprimees, 1,
                        "Une ligne devrait avoir √©t√© supprim√©e")


if __name__ == '__main__':
    print("üî¥ PHASE TDD RED - Tests qui doivent √©chouer")
    print("üéØ Objectif : D√©finir le comportement attendu pour corriger le bug visuel")
    print("=" * 70)
    
    unittest.main(verbosity=2)
