"""
Test d'acceptance des contr√¥les simplifi√©s - Tetris

Contr√¥les disponibles :
‚Üê Fl√®che gauche : D√©placer la pi√®ce vers la gauche
‚Üí Fl√®che droite : D√©placer la pi√®ce vers la droite  
‚Üë Fl√®che haut : Tourner la pi√®ce
‚Üì Fl√®che bas : Chute rapide (une ligne par frame)
Space : Chute instantan√©e (jusqu'en bas)
Esc : Afficher le menu en jeu
P : Pause/Reprendre
"""

import sys
import os
import unittest
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from src.domaine.services import GestionnaireEvenements, TypeEvenement, ToucheClavier
from src.domaine.entites import Plateau, TypePiece
from src.domaine.entites.fabriques.fabrique_pieces import FabriquePieces


class MoteurTest:
    """Moteur de test simplifi√© pour les tests d'acceptance."""
    
    def __init__(self):
        self.plateau = Plateau()
        self.fabrique = FabriquePieces()
        self.piece = self.fabrique.creer(TypePiece.T, x_pivot=5, y_pivot=1)
    
    def obtenir_piece_active(self):
        return self.piece
    
    def obtenir_plateau(self):
        return self.plateau
    
    def faire_descendre_piece(self):
        print("  üí´ Pi√®ce descendue d'une ligne")
        return True
    
    def tourner_piece_active(self):
        """Simule la rotation avec retour de succ√®s."""
        return True
    
    def placer_piece_definitivement(self):
        print("  üìç Pi√®ce plac√©e d√©finitivement")
    
    def generer_nouvelle_piece(self):
        self.piece = self.fabrique.creer_aleatoire(x_pivot=5, y_pivot=1)
        print(f"  üÜï Nouvelle pi√®ce: {self.piece.type_piece.value}")


class TestControlesSimplifies(unittest.TestCase):
    """Tests d'acceptance pour les contr√¥les simplifi√©s du jeu."""
    
    def setUp(self):
        """Pr√©parer les composants pour chaque test."""
        self.gestionnaire = GestionnaireEvenements()
        self.moteur = MoteurTest()
        
        print(f"\nüéÆ TEST CONTR√îLES SIMPLIFI√âS")
        print("=" * 50)
    
    def test_mapping_controles_disponibles(self):
        """Test d'acceptance : V√©rifier que tous les contr√¥les essentiels sont mapp√©s."""
        # Afficher le mapping actuel
        mapping = self.gestionnaire.obtenir_touches_mappees()
        print("üóùÔ∏è  Contr√¥les configur√©s:")
        for touche_physique, touche_logique in mapping.items():
            print(f"   {touche_physique:10} ‚Üí {touche_logique.value}")
        
        print(f"\nüìä {self.gestionnaire.statistiques()}")
        
        # V√©rifier que les contr√¥les essentiels sont pr√©sents
        touches_essentielles = ["Left", "Right", "Up", "Down", "space", "Escape", "p"]
        for touche in touches_essentielles:
            self.assertIn(touche, mapping, f"Contr√¥le manquant: {touche}")
        
        print("‚úÖ Tous les contr√¥les essentiels sont configur√©s")
    
    def test_controles_deplacement_fonctionnels(self):
        """Test d'acceptance : Les contr√¥les de d√©placement fonctionnent correctement."""
        print("\nüß™ Tests des contr√¥les de d√©placement:")
        
        # Tests des contr√¥les
        tests_deplacement = [
            ("Left", "‚Üê D√©placement gauche"),
            ("Right", "‚Üí D√©placement droite"),  
            ("Up", "‚Üë Rotation"),
            ("Down", "‚Üì Chute rapide")
        ]
        
        for touche, description in tests_deplacement:
            with self.subTest(touche=touche):
                print(f"\n{description}")
                
                # Capturer l'√©tat avant
                piece_avant = self.moteur.obtenir_piece_active()
                pivot_avant = piece_avant.position_pivot
                orientation_avant = getattr(piece_avant, '_orientation', 0)
                
                # Ex√©cuter la commande
                resultat = self.gestionnaire.traiter_evenement_clavier(
                    touche, TypeEvenement.CLAVIER_APPUI, self.moteur
                )
                
                # V√©rifier que la commande s'ex√©cute sans erreur
                self.assertIsNotNone(resultat, f"La commande {touche} doit retourner un r√©sultat")
                
                # Capturer l'√©tat apr√®s
                piece_apres = self.moteur.obtenir_piece_active()
                pivot_apres = piece_apres.position_pivot
                orientation_apres = getattr(piece_apres, '_orientation', 0)
                
                print(f"  R√©sultat: {'‚úÖ' if resultat else '‚ùå'}")
                
                # Afficher les changements si applicable
                if pivot_avant != pivot_apres:
                    print(f"  Position: ({pivot_avant.x}, {pivot_avant.y}) ‚Üí ({pivot_apres.x}, {pivot_apres.y})")
                if orientation_avant != orientation_apres:
                    print(f"  Orientation: {orientation_avant} ‚Üí {orientation_apres}")
    
    def test_controles_actions_speciales(self):
        """Test d'acceptance : Les contr√¥les d'actions sp√©ciales fonctionnent."""
        print("\nüß™ Tests des actions sp√©ciales:")
        
        tests_actions = [
            ("space", "‚ö° Chute instantan√©e"),
            ("Escape", "üéõÔ∏è  Menu en jeu"),
            ("p", "‚è∏Ô∏è Pause/Reprendre")
        ]
        
        for touche, description in tests_actions:
            with self.subTest(touche=touche):
                print(f"\n{description}")
                
                # Ex√©cuter la commande
                resultat = self.gestionnaire.traiter_evenement_clavier(
                    touche, TypeEvenement.CLAVIER_APPUI, self.moteur
                )
                
                # V√©rifier que la commande s'ex√©cute
                self.assertIsNotNone(resultat, f"L'action {touche} doit retourner un r√©sultat")
                print(f"  R√©sultat: {'‚úÖ' if resultat else '‚ùå'}")
    
    def test_resume_controles_simplifies(self):
        """Test d'acceptance : R√©sum√© des contr√¥les disponibles."""
        print("\nüéâ Test termin√© - Contr√¥les simplifi√©s pr√™ts !")
        print("\nR√©sum√© des contr√¥les :")
        print("  ‚Üê ‚Üí : D√©placement horizontal")
        print("  ‚Üë   : Rotation") 
        print("  ‚Üì   : Chute rapide")
        print("  SPC : Chute instantan√©e")
        print("  ESC : Menu")
        print("  P   : Pause")
        
        # Assertion finale pour valider que le test d'acceptance r√©ussit
        self.assertTrue(True, "Tests d'acceptance des contr√¥les simplifi√©s r√©ussis")


if __name__ == '__main__':
    unittest.main(verbosity=2)