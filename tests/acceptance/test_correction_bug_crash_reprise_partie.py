#!/usr/bin/env python3
"""
Tests d'acceptance - Correction bug crash reprise partie

Ce test valide la correction du bug qui causait un crash lors de la reprise
de partie apr√®s le d√©marrage du jeu.

Bugs corrig√©s :
1. AttributeError: 'MoteurPartie' object has no attribute 'afficher_menu'
2. Gestion robuste du syst√®me audio

Conformit√© aux directives de d√©veloppement :
- Test d'acceptance dans tests/acceptance/
- M√©thodologie TDD (RED-GREEN-REFACTOR) appliqu√©e
- Architecture hexagonale respect√©e
"""

import unittest
import sys
import os

# Configuration du path pour l'architecture hexagonale
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

from src.domaine.services.moteur_partie import MoteurPartie
from src.adapters.sortie.audio_partie import AudioPartie


class TestCorrectionBugCrashReprisePartie(unittest.TestCase):
    """Tests d'acceptance pour la correction du bug de crash √† la reprise."""
    
    def test_moteur_partie_a_attribut_afficher_menu(self):
        """‚úÖ ACCEPTANCE : MoteurPartie doit avoir l'attribut afficher_menu"""
        # GIVEN
        moteur = MoteurPartie()
        
        # WHEN & THEN
        self.assertTrue(hasattr(moteur, 'afficher_menu'), 
                       "MoteurPartie doit avoir l'attribut afficher_menu")
        self.assertIsInstance(moteur.afficher_menu, bool,
                             "afficher_menu doit √™tre un bool√©en")
        self.assertFalse(moteur.afficher_menu,
                        "afficher_menu doit √™tre False par d√©faut")
    
    def test_code_affichage_peut_acceder_a_afficher_menu(self):
        """‚úÖ ACCEPTANCE : Le code d'affichage peut acc√©der √† afficher_menu sans crash"""
        # GIVEN
        moteur = MoteurPartie()
        
        # WHEN - Simulation du code d'affichage_partie.py ligne 285
        try:
            if moteur.jeu_termine:
                texte = "GAME OVER"
            elif moteur.en_pause:
                texte = "PAUSE"
            elif moteur.afficher_menu:  # Cette ligne crashait avant
                texte = "MENU"
            else:
                texte = "EN JEU"
            
            access_reussi = True
        except AttributeError:
            access_reussi = False
        
        # THEN
        self.assertTrue(access_reussi, "L'acc√®s √† moteur.afficher_menu ne doit pas crasher")
    
    def test_modification_afficher_menu_fonctionne(self):
        """‚úÖ ACCEPTANCE : On peut modifier l'√©tat afficher_menu"""
        # GIVEN
        moteur = MoteurPartie()
        
        # WHEN
        moteur.afficher_menu = True
        
        # THEN
        self.assertTrue(moteur.afficher_menu, "afficher_menu doit pouvoir √™tre modifi√©")
        
        # WHEN
        moteur.afficher_menu = False
        
        # THEN
        self.assertFalse(moteur.afficher_menu, "afficher_menu doit pouvoir √™tre remis √† False")
    
    def test_nettoyage_audio_sans_crash(self):
        """‚úÖ ACCEPTANCE : Le nettoyage audio ne crash pas m√™me sans initialisation"""
        # GIVEN
        audio = AudioPartie()
        
        # WHEN & THEN - Ne doit pas lever d'exception
        try:
            audio.nettoyer()
            nettoyage_reussi = True
        except Exception:
            nettoyage_reussi = False
            
        self.assertTrue(nettoyage_reussi, "Le nettoyage audio ne doit pas crasher")
    
    def test_scenario_complet_reprise_partie(self):
        """‚úÖ ACCEPTANCE : Sc√©nario complet de reprise de partie sans crash"""
        # GIVEN - Cr√©ation d'un moteur comme au d√©marrage
        moteur = MoteurPartie()
        
        # WHEN - Simulation des op√©rations qui crashaient
        try:
            # 1. Acc√®s aux attributs d'√©tat (comme dans l'affichage)
            _ = moteur.jeu_termine
            _ = moteur.en_pause
            _ = moteur.afficher_menu  # Crashait avant
            
            # 2. Modification des √©tats
            moteur.afficher_menu = True
            moteur.en_pause = False
            
            # 3. Nettoyage (comme dans partie_tetris.py ligne 116)
            if moteur.audio:
                moteur.audio.nettoyer()
            
            scenario_reussi = True
            
        except Exception as e:
            scenario_reussi = False
            print(f"√âchec du sc√©nario : {e}")
        
        # THEN
        self.assertTrue(scenario_reussi, 
                       "Le sc√©nario complet de reprise de partie doit fonctionner sans crash")
    
    def test_conformite_directives_architecture_hexagonale(self):
        """‚úÖ ACCEPTANCE : La correction respecte l'architecture hexagonale"""
        # GIVEN
        moteur = MoteurPartie()
        
        # THEN - V√©rifier que l'attribut est dans le domaine (pas dans un adapter)
        self.assertTrue(hasattr(moteur, 'afficher_menu'),
                       "L'attribut afficher_menu doit √™tre dans le domaine (MoteurPartie)")
        
        # THEN - V√©rifier que l'√©tat fait partie de la logique m√©tier
        self.assertIn('afficher_menu', moteur.__dict__,
                     "afficher_menu doit √™tre un attribut d'instance du domaine")


if __name__ == '__main__':
    print("üß™ Tests d'acceptance - Correction bug crash reprise partie")
    print("=" * 70)
    
    # Configuration du test runner avec √©mojis
    suite = unittest.TestLoader().loadTestsFromTestCase(TestCorrectionBugCrashReprisePartie)
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    print("\n" + "=" * 70)
    if result.wasSuccessful():
        print("‚úÖ TOUS LES TESTS D'ACCEPTANCE R√âUSSIS")
        print("   ‚Üí Bug crash reprise partie corrig√© et valid√©")
        print("   ‚Üí Conformit√© aux directives de d√©veloppement respect√©e")
    else:
        print("‚ùå √âCHECS D√âTECT√âS")
        print(f"   ‚Üí {len(result.failures)} √©chec(s)")
        print(f"   ‚Üí {len(result.errors)} erreur(s)")
