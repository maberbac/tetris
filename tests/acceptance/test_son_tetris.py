"""
Tests d'acceptance pour le son tetris.wav lors de l'√©limination de 4 lignes simultan√©es.

Ces tests valident que le joueur entend bien le son TETRIS sp√©cial
quand il r√©alise un "TETRIS" (√©limination de 4 lignes d'un coup).

CONFORMIT√â DIRECTIVES :
- Tests plac√©s dans tests/acceptance/ selon l'organisation stricte
- Volume √† 100% selon la r√®gle audio des directives
- Architecture hexagonale respect√©e avec ports et adaptateurs
"""

import unittest
import sys
import os

# Ajouter le chemin du projet pour les tests
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from src.domaine.services.moteur_partie import MoteurPartie
from src.ports.sortie.audio_jeu import AudioJeu


class AudioSpyTetris(AudioJeu):
    """Spy audio sp√©cialement con√ßu pour capturer les sons tetris.wav."""
    
    def __init__(self):
        self.sons_tetris_joues = []
        self.tous_les_sons = []
        self.erreurs_audio = []
    
    def initialiser(self) -> None:
        pass
    
    def jouer_effet_sonore(self, chemin_fichier: str, volume: float = 1.0) -> None:
        self.tous_les_sons.append((chemin_fichier, volume))
        
        # Capturer sp√©cialement les sons tetris.wav
        if "tetris.wav" in chemin_fichier:
            self.sons_tetris_joues.append({
                'fichier': chemin_fichier,
                'volume': volume,
                'appel_count': len(self.sons_tetris_joues) + 1
            })
            print(f"üéµ TETRIS SOUND CAPTURED: {chemin_fichier} (volume: {volume})")
    
    def jouer_musique(self, chemin_fichier: str, volume: float = 0.7, boucle: bool = False) -> None:
        pass
    
    def arreter_musique(self) -> None:
        pass
    
    def mettre_en_pause_musique(self) -> None:
        pass
    
    def reprendre_musique(self) -> None:
        pass
    
    def basculer_mute_musique(self) -> bool:
        return False
    
    def definir_volume_musique(self, volume: float) -> None:
        pass
    
    def est_musique_en_cours(self) -> bool:
        return False
    
    def obtenir_etat_mute(self) -> bool:
        """Retourne l'√©tat de mute (pour compatibilit√© avec l'interface)."""
        return False
    
    def nettoyer(self) -> None:
        pass
    
    def obtenir_sons_tetris(self):
        """Retourne la liste des sons tetris.wav jou√©s."""
        return self.sons_tetris_joues
    
    def a_joue_tetris_wav(self) -> bool:
        """V√©rifie si au moins un son tetris.wav a √©t√© jou√©."""
        return len(self.sons_tetris_joues) > 0


class TestAcceptanceSonTetris(unittest.TestCase):
    """Tests d'acceptance pour le son tetris.wav lors des TETRIS (4 lignes)."""
    
    def setUp(self):
        """Configuration commune pour tous les tests."""
        self.audio_spy = AudioSpyTetris()
        self.moteur = MoteurPartie(audio=self.audio_spy)
        self.moteur.en_pause = False  # Activer le jeu pour les tests
    
    def test_son_tetris_joue_pour_4_lignes_eliminees(self):
        """
        Test d'acceptance : Le son tetris.wav est jou√© quand le joueur √©limine exactement 4 lignes.
        
        Sc√©nario utilisateur :
        1. Le joueur joue normalement
        2. Il r√©ussit √† √©liminer 4 lignes d'un coup (TETRIS)
        3. Il entend le son sp√©cial tetris.wav
        4. Le volume est √† 100% selon les directives
        """
        print("\nüéÆ TEST D'ACCEPTANCE: Son TETRIS pour 4 lignes")
        print("=" * 55)
        
        # Simuler l'√©limination de 4 lignes (TETRIS)
        nb_lignes_eliminees = 4
        
        # Utiliser la m√©thode officielle du moteur pour simuler la suppression de lignes
        self.moteur.simuler_lignes_supprimees(nb_lignes_eliminees)
        print("üéµ Son TETRIS jou√© ! (4 lignes √©limin√©es)")
        
        # V√©rifications d'acceptance
        print(f"üìä Analyse des r√©sultats:")
        print(f"   Lignes √©limin√©es: {nb_lignes_eliminees}")
        print(f"   Sons tetris.wav jou√©s: {len(self.audio_spy.obtenir_sons_tetris())}")
        print(f"   D√©tails sons: {self.audio_spy.obtenir_sons_tetris()}")
        
        # Assertions d'acceptance
        self.assertTrue(self.audio_spy.a_joue_tetris_wav(), 
                       "Le son tetris.wav devrait √™tre jou√© pour un TETRIS (4 lignes)")
        
        sons_tetris = self.audio_spy.obtenir_sons_tetris()
        self.assertEqual(len(sons_tetris), 1, "Exactement un son tetris.wav devrait √™tre jou√©")
        
        # V√©rifier le volume (100% selon directives)
        son_tetris = sons_tetris[0]
        self.assertEqual(son_tetris['volume'], 1.0, 
                        "Le volume du son TETRIS doit √™tre √† 100% selon les directives")
        
        # V√©rifier le fichier correct
        self.assertIn("tetris.wav", son_tetris['fichier'],
                     "Le fichier doit √™tre tetris.wav")
        
        print("‚úÖ Test d'acceptance R√âUSSI : Son TETRIS pour 4 lignes")
    
    def test_son_tetris_pas_joue_pour_1_2_3_lignes(self):
        """
        Test d'acceptance : Le son tetris.wav n'est PAS jou√© pour moins de 4 lignes.
        
        Sc√©nario utilisateur :
        1. Le joueur √©limine 1, 2 ou 3 lignes
        2. Il n'entend PAS le son tetris.wav sp√©cial
        3. Seuls les TETRIS (4 lignes) d√©clenchent ce son
        """
        print("\nüéÆ TEST D'ACCEPTANCE: Pas de son TETRIS pour 1-3 lignes")
        print("=" * 60)
        
        for nb_lignes in [1, 2, 3]:
            with self.subTest(lignes=nb_lignes):
                # R√©initialiser le spy pour chaque test
                audio_spy_local = AudioSpyTetris()
                moteur_local = MoteurPartie(audio=audio_spy_local)
                moteur_local.en_pause = False
                
                print(f"  üìä Test pour {nb_lignes} ligne(s)...")
                
                # Simuler l'√©limination de nb_lignes lignes via la m√©thode officielle du moteur
                if nb_lignes > 0:
                    moteur_local.simuler_lignes_supprimees(nb_lignes)
                
                # V√©rifier qu'AUCUN son tetris.wav n'est jou√©
                self.assertFalse(audio_spy_local.a_joue_tetris_wav(),
                               f"Le son tetris.wav ne devrait PAS √™tre jou√© pour {nb_lignes} ligne(s)")
                
                print(f"    ‚úÖ Pas de son TETRIS pour {nb_lignes} ligne(s) - Correct")
        
        print("‚úÖ Test d'acceptance R√âUSSI : Pas de son TETRIS pour 1-3 lignes")
    
    def test_message_tetris_toujours_present_avec_son(self):
        """
        Test d'acceptance : Le message TETRIS est toujours affich√© avec le son.
        
        Sc√©nario utilisateur :
        1. Le joueur r√©alise un TETRIS (4 lignes)
        2. Il voit le message "[PARTY] TETRIS ! (+800 pts)"
        3. Il entend le son tetris.wav en m√™me temps
        4. L'exp√©rience est compl√®te (visuel + audio)
        """
        print("\nüéÆ TEST D'ACCEPTANCE: Message TETRIS + Son ensemble")
        print("=" * 55)
        
        # Simuler un TETRIS complet via la m√©thode officielle du moteur
        nb_lignes = 4
        self.moteur.simuler_lignes_supprimees(nb_lignes)
        print("üéµ Son TETRIS jou√© ! (4 lignes √©limin√©es)")
        
        # V√©rifier l'exp√©rience compl√®te
        messages = self.moteur.messages  # Utiliser directement la liste des messages
        messages_tetris = [msg for msg in messages if "TETRIS" in msg]
        
        print(f"üì® Messages TETRIS: {messages_tetris}")
        print(f"üéµ Sons TETRIS jou√©s: {len(self.audio_spy.obtenir_sons_tetris())}")
        
        # Assertions d'acceptance pour l'exp√©rience compl√®te
        self.assertTrue(len(messages_tetris) > 0, "Le message TETRIS doit √™tre affich√©")
        self.assertTrue(self.audio_spy.a_joue_tetris_wav(), "Le son TETRIS doit √™tre jou√©")
        
        # V√©rifier le contenu du message
        message_tetris = messages_tetris[0]
        self.assertIn("TETRIS", message_tetris, "Le message doit contenir 'TETRIS'")
        self.assertIn("800", message_tetris, "Le message doit montrer le bonus de 800 points")
        
        print("‚úÖ Test d'acceptance R√âUSSI : Exp√©rience TETRIS compl√®te (message + son)")
    
    def test_integration_complete_tetris_dans_moteur(self):
        """
        Test d'acceptance : Int√©gration compl√®te du son TETRIS dans le moteur de partie.
        
        Sc√©nario r√©aliste :
        1. Le moteur fonctionne normalement
        2. Une pi√®ce est plac√©e et g√©n√®re 4 lignes compl√®tes  
        3. Le son TETRIS est automatiquement jou√©
        4. Tout fonctionne sans intervention manuelle
        """
        print("\nüéÆ TEST D'ACCEPTANCE: Int√©gration compl√®te TETRIS")
        print("=" * 55)
        
        # Test avec la m√©thode r√©elle du moteur (simulation compl√®te)
        print("üìä Simulation d'un placement avec 4 lignes compl√®tes...")
        
        # Utiliser la m√©thode officielle du moteur pour simuler 4 lignes supprim√©es
        nb_lignes_supprimees = 4
        self.moteur.simuler_lignes_supprimees(nb_lignes_supprimees)
        print("üéµ Son TETRIS jou√© ! (4 lignes √©limin√©es)")
        print(f"[PARTY] {nb_lignes_supprimees} ligne(s) compl√©t√©e(s) ! Score: {self.moteur.stats.score}")
        
        # V√©rifications d'int√©gration
        print(f"üìä R√©sultats d'int√©gration:")
        print(f"   Score obtenu: {self.moteur.stats.score}")
        print(f"   Messages directs: {self.moteur.messages}")
        print(f"   Sons TETRIS jou√©s: {len(self.audio_spy.obtenir_sons_tetris())}")
        
        # Assertions d'int√©gration
        self.assertEqual(self.moteur.stats.score, 800, "Le score TETRIS doit √™tre de 800 points")
        self.assertTrue(self.audio_spy.a_joue_tetris_wav(), 
                       "Le son TETRIS doit √™tre jou√© automatiquement")
        
        messages = self.moteur.messages  # Utiliser directement la liste des messages
        print(f"   D√©tail messages: {messages}")  # Debug
        self.assertTrue(len(messages) > 0, "Des messages doivent √™tre g√©n√©r√©s")
        self.assertTrue(any("TETRIS" in msg for msg in messages),
                       f"Le message TETRIS doit √™tre g√©n√©r√©. Messages trouv√©s: {messages}")
        
        print("‚úÖ Test d'acceptance R√âUSSI : Int√©gration compl√®te TETRIS dans le moteur")
    
    def test_fichier_tetris_wav_existe_et_accessible(self):
        """
        Test d'acceptance : Le fichier tetris.wav existe et est accessible.
        
        Pr√©requis technique :
        1. Le fichier assets/audio/sfx/tetris.wav doit exister
        2. Il doit √™tre accessible en lecture
        3. L'impl√©mentation peut l'utiliser sans erreur
        """
        print("\nüéÆ TEST D'ACCEPTANCE: Fichier tetris.wav accessible")
        print("=" * 55)
        
        chemin_tetris = "assets/audio/sfx/tetris.wav"
        chemin_absolu = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))), chemin_tetris)
        
        print(f"üîç V√©rification fichier tetris.wav:")
        print(f"   Chemin relatif: {chemin_tetris}")
        print(f"   Chemin absolu: {chemin_absolu}")
        print(f"   Working directory: {os.getcwd()}")
        
        # Essayer les deux chemins possibles
        fichier_trouve = False
        chemin_final = None
        
        if os.path.exists(chemin_tetris):
            fichier_trouve = True
            chemin_final = chemin_tetris
        elif os.path.exists(chemin_absolu):
            fichier_trouve = True
            chemin_final = chemin_absolu
        
        # V√©rifier que le fichier existe (l'un des deux chemins)
        self.assertTrue(fichier_trouve,
                       f"Le fichier tetris.wav doit exister. Chemins test√©s:\n- {chemin_tetris}\n- {chemin_absolu}")
        
        # V√©rifier qu'il est lisible
        self.assertTrue(os.access(chemin_final, os.R_OK),
                       f"Le fichier {chemin_final} doit √™tre lisible")
        
        # V√©rifier la taille (un fichier audio ne peut pas √™tre vide)
        taille = os.path.getsize(chemin_final)
        self.assertGreater(taille, 0, 
                          f"Le fichier {chemin_final} ne peut pas √™tre vide")
        
        print(f"üìÅ Fichier tetris.wav:")
        print(f"   Chemin utilis√©: {chemin_final}")
        print(f"   Existe: ‚úÖ")
        print(f"   Lisible: ‚úÖ")
        print(f"   Taille: {taille} bytes")
        
        print("‚úÖ Test d'acceptance R√âUSSI : Fichier tetris.wav accessible")


def run_acceptance_tests():
    """Lance tous les tests d'acceptance pour le son TETRIS."""
    print("üéµ TESTS D'ACCEPTANCE - SON TETRIS.WAV POUR 4 LIGNES")
    print("=" * 65)
    
    # Cr√©er la suite de tests
    suite = unittest.TestLoader().loadTestsFromTestCase(TestAcceptanceSonTetris)
    
    # Ex√©cuter les tests avec un rapport d√©taill√©
    runner = unittest.TextTestRunner(verbosity=2, stream=sys.stdout)
    result = runner.run(suite)
    
    # Rapport final
    print("\n" + "=" * 65)
    print("üèÜ RAPPORT FINAL - TESTS D'ACCEPTANCE SON TETRIS")
    print("=" * 65)
    print(f"Tests ex√©cut√©s: {result.testsRun}")
    print(f"‚úÖ Succ√®s: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå √âchecs: {len(result.failures)}")
    print(f"‚ö†Ô∏è  Erreurs: {len(result.errors)}")
    
    if result.wasSuccessful():
        print("üéâ TOUS LES TESTS D'ACCEPTANCE R√âUSSIS !")
        print("‚ú® Le son tetris.wav est correctement impl√©ment√© pour les TETRIS (4 lignes)")
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        if result.failures:
            print("\n√âchecs:")
            for test, traceback in result.failures:
                print(f"  - {test}: {traceback}")
        if result.errors:
            print("\nErreurs:")
            for test, traceback in result.errors:
                print(f"  - {test}: {traceback}")
    
    return result.wasSuccessful()


if __name__ == '__main__':
    # Lancer les tests d'acceptance
    success = run_acceptance_tests()
    sys.exit(0 if success else 1)
