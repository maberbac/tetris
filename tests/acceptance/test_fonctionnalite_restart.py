"""
Tests d'acceptance pour la fonctionnalitÃ© restart.
Ces tests documentent le comportement attendu du point de vue utilisateur.
"""
import unittest
from unittest.mock import Mock

from src.domaine.services.moteur_partie import MoteurPartie
from src.adapters.entree.gestionnaire_partie import GestionnairePartie
from src.domaine.services.gestionnaire_evenements import TypeEvenement


class TestAcceptanceRestart(unittest.TestCase):
    """Tests d'acceptance pour la fonctionnalitÃ© restart."""
    
    def setUp(self):
        """Configuration des tests."""
        self.moteur = MoteurPartie()
        self.gestionnaire = GestionnairePartie()
    
    def test_touche_r_redÃ©marre_apres_game_over(self):
        """
        ScÃ©nario : L'utilisateur termine une partie et veut redÃ©marrer.
        
        Ã‰tant donnÃ© que le jeu est terminÃ© (game over)
        Quand l'utilisateur appuie sur la touche R
        Alors une nouvelle partie commence
        Et le score est remis Ã  zÃ©ro
        Et une nouvelle piÃ¨ce est gÃ©nÃ©rÃ©e
        """
        print("\nğŸ§ª TEST ACCEPTANCE: Restart aprÃ¨s game over")
        print("=" * 50)
        
        # Arrange - Simuler game over
        self.moteur.jeu_termine = True
        self.moteur.stats.score = 1500  # Score d'une partie prÃ©cÃ©dente
        score_initial = self.moteur.stats.score
        
        print(f"ğŸ“Š Ã‰tat initial:")
        print(f"   Game Over: {self.moteur.est_game_over()}")
        print(f"   Score: {score_initial}")
        
        # Act - Appuyer sur R
        result = self.gestionnaire.traiter_evenement_clavier('r', TypeEvenement.CLAVIER_APPUI, self.moteur)
        
        print(f"ğŸ“Š Ã‰tat aprÃ¨s restart:")
        print(f"   Game Over: {self.moteur.est_game_over()}")
        print(f"   Score: {self.moteur.stats.score}")
        print(f"   Commande rÃ©ussie: {result}")
        
        # Assert
        self.assertTrue(result, "La commande restart doit rÃ©ussir")
        self.assertFalse(self.moteur.est_game_over(), "Le jeu ne doit plus Ãªtre terminÃ©")
        self.assertEqual(self.moteur.stats.score, 0, "Le score doit Ãªtre remis Ã  zÃ©ro")
        self.assertIsNotNone(self.moteur.piece_active, "Une nouvelle piÃ¨ce doit Ãªtre gÃ©nÃ©rÃ©e")
        self.assertGreater(score_initial, self.moteur.stats.score, "Le score doit avoir Ã©tÃ© reset")
        print("âœ… Test d'acceptance RÃ‰USSI : Restart aprÃ¨s game over")
    
    def test_touche_r_ignorÃ©e_pendant_partie_en_cours(self):
        """
        ScÃ©nario : L'utilisateur appuie accidentellement sur R pendant le jeu.
        
        Ã‰tant donnÃ© que le jeu est en cours (pas de game over)
        Quand l'utilisateur appuie sur la touche R
        Alors rien ne se passe
        Et la partie continue normalement
        """
        print("\nğŸ§ª TEST ACCEPTANCE: R ignorÃ© pendant partie")
        print("=" * 50)
        
        # Arrange - Jeu en cours
        self.assertFalse(self.moteur.est_game_over(), "Le jeu doit Ãªtre en cours")
        piece_avant = self.moteur.piece_active
        score_avant = self.moteur.stats.score
        
        print(f"ğŸ“Š Ã‰tat initial:")
        print(f"   Game Over: {self.moteur.est_game_over()}")
        print(f"   Score: {score_avant}")
        print(f"   PiÃ¨ce: {piece_avant.type_piece}")
        
        # Act - Appuyer sur R
        result = self.gestionnaire.traiter_evenement_clavier('r', TypeEvenement.CLAVIER_APPUI, self.moteur)
        
        print(f"ğŸ“Š Ã‰tat aprÃ¨s tentative R:")
        print(f"   Game Over: {self.moteur.est_game_over()}")
        print(f"   Score: {self.moteur.stats.score}")
        print(f"   Commande ignorÃ©e: {not result}")
        
        # Assert
        self.assertFalse(result, "La commande restart doit Ãªtre ignorÃ©e")
        self.assertFalse(self.moteur.est_game_over(), "Le jeu doit toujours Ãªtre en cours")
        self.assertEqual(self.moteur.piece_active.type_piece, piece_avant.type_piece, "La piÃ¨ce ne doit pas changer")
        self.assertEqual(self.moteur.stats.score, score_avant, "Le score ne doit pas changer")
        print("âœ… Test d'acceptance RÃ‰USSI : R ignorÃ© pendant partie")
    
    def test_restart_prÃ©serve_architecture_jeu(self):
        """
        ScÃ©nario : Le restart doit prÃ©server l'intÃ©gritÃ© architecturale.
        
        Ã‰tant donnÃ© un jeu terminÃ© avec un Ã©tat complexe
        Quand l'utilisateur redÃ©marre
        Alors tous les composants sont correctement rÃ©initialisÃ©s
        """
        print("\nğŸ§ª TEST ACCEPTANCE: Architecture prÃ©servÃ©e")
        print("=" * 50)
        
        # Arrange - CrÃ©er un Ã©tat complexe puis terminer
        self.moteur.stats.score = 5000
        self.moteur.stats.niveau = 3
        self.moteur.stats.lignes_completees = 25
        self.moteur.jeu_termine = True
        
        print(f"ğŸ“Š Ã‰tat complexe initial:")
        print(f"   Score: {self.moteur.stats.score}")
        print(f"   Niveau: {self.moteur.stats.niveau}")
        print(f"   Lignes: {self.moteur.stats.lignes_completees}")
        
        # Act - Restart
        result = self.gestionnaire.traiter_evenement_clavier('r', TypeEvenement.CLAVIER_APPUI, self.moteur)
        
        print(f"ğŸ“Š Ã‰tat aprÃ¨s restart:")
        print(f"   Score: {self.moteur.stats.score}")
        print(f"   Niveau: {self.moteur.stats.niveau}")
        print(f"   Lignes: {self.moteur.stats.lignes_completees}")
        print(f"   Game Over: {self.moteur.est_game_over()}")
        
        # Assert - VÃ©rifier rÃ©initialisation complÃ¨te
        self.assertTrue(result, "Restart doit rÃ©ussir")
        self.assertEqual(self.moteur.stats.score, 0, "Score reset")
        self.assertEqual(self.moteur.stats.niveau, 1, "Niveau reset")
        self.assertEqual(self.moteur.stats.lignes_completees, 0, "Lignes reset")
        self.assertFalse(self.moteur.est_game_over(), "Game over reset")
        self.assertIsNotNone(self.moteur.piece_active, "Nouvelle piÃ¨ce gÃ©nÃ©rÃ©e")
        self.assertIsNotNone(self.moteur.piece_suivante, "Prochaine piÃ¨ce gÃ©nÃ©rÃ©e")
        print("âœ… Test d'acceptance RÃ‰USSI : Architecture prÃ©servÃ©e")
    
    def test_restart_fonctionne_plusieurs_fois_consecutives(self):
        """
        ScÃ©nario : L'utilisateur redÃ©marre plusieurs parties de suite.
        
        Ã‰tant donnÃ© plusieurs redÃ©marrages consÃ©cutifs
        Quand l'utilisateur appuie sur R Ã  chaque game over
        Alors chaque restart fonctionne correctement
        """
        print("\nğŸ§ª TEST ACCEPTANCE: Multiples restarts")
        print("=" * 50)
        
        for i in range(3):
            print(f"   ğŸ”„ Restart #{i+1}")
            
            # Simuler game over
            self.moteur.jeu_termine = True
            self.moteur.stats.score = (i + 1) * 1000
            
            # Restart
            result = self.gestionnaire.traiter_evenement_clavier('r', TypeEvenement.CLAVIER_APPUI, self.moteur)
            
            # VÃ©rifier
            self.assertTrue(result, f"Restart #{i+1} doit rÃ©ussir")
            self.assertFalse(self.moteur.est_game_over(), f"Game over reset #{i+1}")
            self.assertEqual(self.moteur.stats.score, 0, f"Score reset #{i+1}")
            print(f"     âœ… Restart #{i+1} rÃ©ussi")
        
        print("âœ… Test d'acceptance RÃ‰USSI : Multiples restarts")
    
    def test_mapping_touche_r_correct(self):
        """
        ScÃ©nario : La touche R doit Ãªtre correctement mappÃ©e.
        
        Ã‰tant donnÃ© le systÃ¨me de mapping des touches
        Quand on vÃ©rifie le mapping de la touche R
        Alors elle doit Ãªtre associÃ©e Ã  la commande restart
        """
        print("\nğŸ§ª TEST ACCEPTANCE: Mapping touche R")
        print("=" * 50)
        
        # VÃ©rifier que 'r' est dans le mapping pygame
        from src.adapters.entree.gestionnaire_partie import convertir_touche_pygame
        import pygame
        
        # Test du mapping pygame vers string
        touche_string = convertir_touche_pygame(pygame.K_r)
        self.assertEqual(touche_string, "r", "pygame.K_r doit se convertir en 'r'")
        print(f"   ğŸ“‹ Mapping pygame: K_r â†’ '{touche_string}'")
        
        # VÃ©rifier que le gestionnaire traite correctement la touche R
        from src.domaine.services.gestionnaire_evenements import ToucheClavier
        from src.domaine.services.commandes.commande_redemarrer import CommandeRedemarrer
        
        # CrÃ©er un moteur en Ã©tat de game over pour tester la commande
        moteur_test = MoteurPartie()
        moteur_test.jeu_termine = True  # Mettre en Ã©tat game over
        
        # Essayer d'exÃ©cuter la commande restart via le gestionnaire
        result = self.gestionnaire.traiter_evenement_clavier('r', TypeEvenement.CLAVIER_APPUI, moteur_test)
        
        # VÃ©rifier que la commande s'exÃ©cute (rÃ©sultat True = succÃ¨s)
        self.assertTrue(result, "La commande restart doit Ãªtre trouvÃ©e et exÃ©cutÃ©e")
        print(f"   ğŸ“‹ Commande: Touche 'r' â†’ Commande exÃ©cutÃ©e avec succÃ¨s")
        
        print("âœ… Test d'acceptance RÃ‰USSI : Mapping touche R correct")


class TestAcceptanceRestartAvecAudio(unittest.TestCase):
    """Tests d'acceptance pour restart avec systÃ¨me audio."""
    
    def setUp(self):
        """Configuration avec audio mock."""
        self.moteur = MoteurPartie()
        self.gestionnaire = GestionnairePartie()
        
        # Mock audio pour Ã©viter les dÃ©pendances
        self.audio_mock = Mock()
        self.moteur.audio = self.audio_mock
    
    def test_restart_preserve_Ã©tat_audio(self):
        """
        ScÃ©nario : Le restart doit prÃ©server l'Ã©tat audio (mute/unmute).
        
        Ã‰tant donnÃ© que l'audio est en mode mute
        Quand l'utilisateur redÃ©marre aprÃ¨s game over
        Alors l'Ã©tat mute doit Ãªtre prÃ©servÃ©
        """
        print("\nğŸ§ª TEST ACCEPTANCE: Ã‰tat audio prÃ©servÃ©")
        print("=" * 50)
        
        # Arrange - Simuler Ã©tat mute
        self.audio_mock.est_mute = True
        self.moteur.jeu_termine = True
        
        print(f"   ğŸ”‡ Ã‰tat mute initial: {self.audio_mock.est_mute}")
        
        # Act - Restart
        result = self.gestionnaire.traiter_evenement_clavier('r', TypeEvenement.CLAVIER_APPUI, self.moteur)
        
        print(f"   ğŸ”‡ Ã‰tat mute aprÃ¨s restart: {self.audio_mock.est_mute}")
        
        # Assert
        self.assertTrue(result, "Restart doit rÃ©ussir")
        self.assertTrue(self.audio_mock.est_mute, "Ã‰tat mute doit Ãªtre prÃ©servÃ©")
        print("âœ… Test d'acceptance RÃ‰USSI : Ã‰tat audio prÃ©servÃ©")
    
    def test_restart_ne_perturbe_pas_audio(self):
        """
        ScÃ©nario : Le restart ne doit pas perturber le systÃ¨me audio.
        
        Ã‰tant donnÃ© un systÃ¨me audio fonctionnel
        Quand l'utilisateur redÃ©marre
        Alors l'audio continue de fonctionner normalement
        """
        print("\nğŸ§ª TEST ACCEPTANCE: Audio non perturbÃ©")
        print("=" * 50)
        
        # Arrange
        self.moteur.jeu_termine = True
        audio_reference = self.moteur.audio
        
        # Act
        result = self.gestionnaire.traiter_evenement_clavier('r', TypeEvenement.CLAVIER_APPUI, self.moteur)
        
        # Assert - VÃ©rifier que l'audio n'a pas Ã©tÃ© perturbÃ©
        self.assertTrue(result, "Restart doit rÃ©ussir")
        self.assertEqual(self.moteur.audio, audio_reference, "RÃ©fÃ©rence audio prÃ©servÃ©e")
        print("âœ… Test d'acceptance RÃ‰USSI : Audio non perturbÃ©")


if __name__ == '__main__':
    unittest.main()
