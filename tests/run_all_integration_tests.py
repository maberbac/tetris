"""
Script de lancement de tous les tests d'int√©gration.
"""

import os
import subprocess
import sys
import unittest

def lancer_tests_integration():
    """Lance tous les tests d'int√©gration."""
    print("üß™ LANCEMENT DES TESTS D'INT√âGRATION")
    print("=" * 50)
    
    # D√©terminer le chemin du r√©pertoire integration
    # Le script peut √™tre lanc√© depuis la racine ou depuis tests/
    script_dir = os.path.dirname(os.path.abspath(__file__))
    repertoire_integration = os.path.join(script_dir, "integration")
    
    if not os.path.exists(repertoire_integration):
        print(f"‚ùå R√©pertoire non trouv√©: {repertoire_integration}")
        return False
    
    try:
        # D√©couvrir tous les fichiers de test dans le r√©pertoire
        fichiers_test = []
        for fichier in os.listdir(repertoire_integration):
            if fichier.startswith('test_') and fichier.endswith('.py'):
                fichiers_test.append(fichier)
        
        print(f"üìä {len(fichiers_test)} fichiers de test d√©couverts: {fichiers_test}")
        
        if not fichiers_test:
            print("‚ö†Ô∏è Aucun fichier de test d'int√©gration trouv√©")
            return True
        
        # Ex√©cuter chaque fichier de test
        tous_passes = True
        for fichier in fichiers_test:
            print(f"\nüîß Ex√©cution de {fichier}")
            print("-" * 30)
            
            try:
                # Importer dynamiquement le module
                nom_module = fichier[:-3]  # Enlever .py
                module_path = f"integration.{nom_module}"
                module = __import__(module_path, fromlist=[nom_module])
                
                # Trouver toutes les fonctions de test dans le module
                fonctions_test = [nom for nom in dir(module) if nom.startswith('test_')]
                print(f"ÔøΩ Fonctions de test trouv√©es: {fonctions_test}")
                
                # Ex√©cuter chaque fonction de test
                for nom_fonction in fonctions_test:
                    print(f"\n‚ñ∂Ô∏è Ex√©cution de {nom_fonction}")
                    fonction = getattr(module, nom_fonction)
                    try:
                        resultat = fonction()
                        if resultat is not False:  # Consid√©rer True ou None comme succ√®s
                            print(f"‚úÖ {nom_fonction} - PASS√â")
                        else:
                            print(f"‚ùå {nom_fonction} - √âCHOU√â")
                            tous_passes = False
                    except Exception as e:
                        print(f"‚ùå {nom_fonction} - ERREUR: {e}")
                        tous_passes = False
                        
            except Exception as e:
                print(f"‚ùå Erreur lors de l'import de {fichier}: {e}")
                tous_passes = False
        
        return tous_passes
        
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement des tests: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Point d'entr√©e principal."""
    print("üéØ TESTS TETRIS - Lanceur depuis la racine")
    print("=" * 50)
    
    if lancer_tests_integration():
        print("\n‚úÖ Tous les tests sont pass√©s !")
    else:
        print("\n‚ùå Certains tests ont √©chou√©.")
        sys.exit(1)

if __name__ == "__main__":
    main()
