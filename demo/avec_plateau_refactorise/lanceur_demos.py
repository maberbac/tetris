"""
Lanceur de d√©monstrations avec Plateau Refactoris√©

Ce script permet de lancer facilement toutes les d√©monstrations 6x6
utilisant le vrai plateau refactoris√©.

‚ú® AVANTAGES du plateau refactoris√© :
- üéØ Pas de code dupliqu√© (PlateauDemoX)
- üéâ D√©tection automatique des lignes compl√®tes
- üßπ Code plus propre et maintenable
- ‚ö° Int√©gration compl√®te avec l'architecture
"""

import sys
import os

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

def afficher_menu():
    """Affiche le menu de s√©lection des d√©monstrations."""
    print("\n" + "="*60)
    print("üéÆ D√âMONSTRATIONS TETRIS - PLATEAU REFACTORIS√â")
    print("="*60)
    print()
    print("‚ú® Ces d√©mos utilisent le vrai Plateau(6, 6) refactoris√© !")
    print("üéØ Avantages : lignes compl√®tes, code propre, int√©gration totale")
    print()
    print("S√©lectionnez une pi√®ce √† d√©montrer :")
    print()
    print("  [I] - Pi√®ce I (Cyan) - Barre droite")
    print("  [O] - Pi√®ce O (Jaune) - Carr√©")
    print("  [T] - Pi√®ce T (Violet) - T")
    print("  [S] - Pi√®ce S (Vert) - S")
    print("  [Z] - Pi√®ce Z (Rouge) - Z")
    print("  [J] - Pi√®ce J (Bleu) - J")
    print("  [L] - Pi√®ce L (Orange) - L")
    print()
    print("  [A] - Toutes les pi√®ces (cycle automatique)")
    print("  [Q] - Quitter")
    print()
    print("="*60)

def lancer_demo_piece(piece: str):
    """Lance la d√©monstration pour une pi√®ce sp√©cifique."""
    print(f"\nüöÄ Lancement de la d√©mo pour la pi√®ce {piece}...")
    
    try:
        if piece.upper() == 'I':
            from demo_i_avec_plateau import DemoIAvecPlateauRefactorise
            demo = DemoIAvecPlateauRefactorise()
            demo.executer()
            
        elif piece.upper() == 'O':
            from demo_o_avec_plateau import DemoOAvecPlateauRefactorise
            demo = DemoOAvecPlateauRefactorise()
            demo.executer()
            
        elif piece.upper() == 'T':
            from demo_t_avec_plateau import DemoTAvecPlateauRefactorise
            demo = DemoTAvecPlateauRefactorise()
            demo.executer()
            
        elif piece.upper() == 'S':
            from demo_s_avec_plateau import DemoSAvecPlateauRefactorise
            demo = DemoSAvecPlateauRefactorise()
            demo.executer()
            
        elif piece.upper() == 'Z':
            from demo_z_avec_plateau import DemoZAvecPlateauRefactorise
            demo = DemoZAvecPlateauRefactorise()
            demo.executer()
            
        elif piece.upper() == 'J':
            from demo_j_avec_plateau import DemoJAvecPlateauRefactorise
            demo = DemoJAvecPlateauRefactorise()
            demo.executer()
            
        elif piece.upper() == 'L':
            from demo_l_avec_plateau import DemoLAvecPlateauRefactorise
            demo = DemoLAvecPlateauRefactorise()
            demo.executer()
            
        elif piece.upper() == 'L':
            from demo_l_avec_plateau import DemoLAvecPlateauRefactorise
            demo = DemoLAvecPlateauRefactorise()
            demo.executer()
            
        elif piece.upper() == 'A':
            print("üöß Mode cycle automatique en cours de d√©veloppement...")
            # lancer_cycle_automatique()
            
        else:
            print(f"‚ùå Pi√®ce '{piece}' non reconnue.")
            return False
            
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import : {e}")
        print(f"üöß La d√©mo pour la pi√®ce {piece} n'est pas encore impl√©ment√©e.")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement : {e}")
        return False

def main():
    """Fonction principale du lanceur."""
    print("üéÆ Lanceur de d√©monstrations Tetris avec plateau refactoris√©")
    
    while True:
        afficher_menu()
        
        try:
            choix = input("Votre choix : ").strip()
            
            if not choix:
                continue
                
            if choix.upper() == 'Q':
                print("\nüëã Au revoir !")
                break
                
            if choix.upper() in ['I', 'O', 'T', 'S', 'Z', 'J', 'L', 'A']:
                success = lancer_demo_piece(choix)
                if success:
                    print(f"\n‚ú® D√©mo {choix.upper()} termin√©e.")
                else:
                    print(f"\n‚ö†Ô∏è Impossible de lancer la d√©mo {choix.upper()}.")
                
                input("\nAppuyez sur Entr√©e pour continuer...")
            else:
                print(f"\n‚ùå Choix '{choix}' invalide. Utilisez I, O, T, S, Z, J, L, A ou Q.")
                input("Appuyez sur Entr√©e pour continuer...")
                
        except KeyboardInterrupt:
            print("\n\nüëã Interruption clavier - Au revoir !")
            break
        except Exception as e:
            print(f"\n‚ùå Erreur inattendue : {e}")
            input("Appuyez sur Entr√©e pour continuer...")

if __name__ == "__main__":
    # Changer le r√©pertoire de travail vers le r√©pertoire du script
    os.chdir(os.path.dirname(os.path.abspath(__file__)))
    main()
