"""
Commandes - Command Pattern pour les actions de jeu Tetris

Ce module impl√©mente le Command Pattern pour encapsuler les actions
que le joueur peut effectuer sur les pi√®ces et le jeu.

Avantages du Command Pattern :
- S√©paration des inputs et des actions
- Facilite l'ajout de nouvelles commandes
- Permet l'historique et l'annulation (futur)
- Testabilit√© des actions individuellement
"""

from abc import ABC, abstractmethod
from typing import Protocol
from ...entites.piece import Piece
from ...entites.plateau import Plateau
from ..logger_tetris import logger_tetris


class MoteurJeu(Protocol):
    """
    Interface pour le moteur de jeu.
    
    D√©finit les m√©thodes que les commandes peuvent appeler
    pour modifier l'√©tat du jeu.
    """
    
    def obtenir_piece_active(self) -> Piece:
        """Retourne la pi√®ce actuellement contr√¥l√©e par le joueur."""
        ...
    
    def obtenir_plateau(self) -> Plateau:
        """Retourne le plateau de jeu."""
        ...
    
    def faire_descendre_piece(self) -> bool:
        """Fait descendre la pi√®ce d'une ligne. Retourne True si possible."""
        ...
    
    def placer_piece_definitivement(self) -> None:
        """Place la pi√®ce active d√©finitivement sur le plateau."""
        ...
    
    def generer_nouvelle_piece(self) -> None:
        """G√©n√®re une nouvelle pi√®ce apr√®s placement."""
        ...


class Commande(ABC):
    """
    Interface abstraite pour toutes les commandes de jeu.
    
    Impl√©mente le Command Pattern classique avec execute().
    """
    
    @abstractmethod
    def execute(self, moteur: MoteurJeu) -> bool:
        """
        Ex√©cute la commande sur le moteur de jeu.
        
        Args:
            moteur: Instance du moteur de jeu
            
        Returns:
            True si la commande a √©t√© ex√©cut√©e avec succ√®s, False sinon
        """
        pass


class CommandeDeplacerGauche(Commande):
    """Commande pour d√©placer la pi√®ce vers la gauche."""
    
    def execute(self, moteur: MoteurJeu) -> bool:
        """D√©place la pi√®ce active vers la gauche si possible."""
        piece = moteur.obtenir_piece_active()
        plateau = moteur.obtenir_plateau()
        
        # Sauvegarder la position actuelle
        positions_originales = piece.positions.copy()
        
        # Essayer le d√©placement
        piece.deplacer(-1, 0)
        
        # V√©rifier si le d√©placement est valide
        if plateau.peut_placer_piece(piece):
            return True
        else:
            # Annuler le d√©placement
            piece._positions = positions_originales
            return False


class CommandeDeplacerDroite(Commande):
    """Commande pour d√©placer la pi√®ce vers la droite."""
    
    def execute(self, moteur: MoteurJeu) -> bool:
        """D√©place la pi√®ce active vers la droite si possible."""
        piece = moteur.obtenir_piece_active()
        plateau = moteur.obtenir_plateau()
        
        # Sauvegarder la position actuelle
        positions_originales = piece.positions.copy()
        
        # Essayer le d√©placement
        piece.deplacer(1, 0)
        
        # V√©rifier si le d√©placement est valide
        if plateau.peut_placer_piece(piece):
            return True
        else:
            # Annuler le d√©placement
            piece._positions = positions_originales
            return False


class CommandeDescendre(Commande):
    """Commande pour faire descendre la pi√®ce d'une ligne."""
    
    def execute(self, moteur: MoteurJeu) -> bool:
        """Fait descendre la pi√®ce active d'une ligne si possible."""
        return moteur.faire_descendre_piece()


class CommandeChuteRapide(Commande):
    """Commande pour faire tomber la pi√®ce jusqu'en bas."""
    
    def execute(self, moteur: MoteurJeu) -> bool:
        """Fait tomber la pi√®ce jusqu'√† ce qu'elle ne puisse plus descendre."""
        piece = moteur.obtenir_piece_active()
        plateau = moteur.obtenir_plateau()
        
        nb_lignes_descendues = 0
        
        while True:
            # Sauvegarder la position actuelle
            positions_originales = piece.positions.copy()
            
            # Essayer de descendre
            piece.deplacer(0, 1)
            
            # V√©rifier si le d√©placement est valide
            if plateau.peut_placer_piece(piece):
                nb_lignes_descendues += 1
            else:
                # Annuler le dernier d√©placement et arr√™ter
                piece._positions = positions_originales
                break
        
        # Placer la pi√®ce d√©finitivement
        moteur.placer_piece_definitivement()
        moteur.generer_nouvelle_piece()
        
        return nb_lignes_descendues > 0


class CommandeTourner(Commande):
    """Commande pour faire tourner la pi√®ce."""
    
    def execute(self, moteur: MoteurJeu) -> bool:
        """Fait tourner la pi√®ce active si possible."""
        piece = moteur.obtenir_piece_active()
        plateau = moteur.obtenir_plateau()
        
        # Sauvegarder l'√©tat actuel (positions et orientation)
        positions_originales = piece.positions.copy()
        orientation_originale = piece._orientation
        
        # Essayer la rotation
        piece.tourner()
        
        # V√©rifier si la rotation est valide
        if plateau.peut_placer_piece(piece):
            return True
        else:
            # Annuler la rotation
            piece._positions = positions_originales
            piece._orientation = orientation_originale
            return False


class CommandePause(Commande):
    """Commande pour mettre le jeu en pause."""
    
    def execute(self, moteur: MoteurJeu) -> bool:
        """Met le jeu en pause ou le reprend."""
        # Cette commande sera impl√©ment√©e selon les besoins du moteur
        # Pour l'instant, on retourne toujours True
        return True


class CommandeBasculerMute(Commande):
    """Commande pour basculer le mute/unmute de la musique."""
    
    def execute(self, moteur: MoteurJeu) -> bool:
        """Bascule l'√©tat mute/unmute de la musique."""
        try:
            audio = moteur.obtenir_audio()
            if audio is None:
                print("‚ùå Audio non disponible")
                logger_tetris.warning("‚ùå Audio non disponible")
                return False
            
            est_mute = audio.basculer_mute_musique()
            
            # Feedback utilisateur (directement √† l'utilisateur)
            if est_mute:
                print("üîá Musique d√©sactiv√©e")
                logger_tetris.info("üîá Musique d√©sactiv√©e")
            else:
                print("üîä Musique r√©activ√©e")
                logger_tetris.info("üîä Musique r√©activ√©e")
                
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur audio: {e}")
            logger_tetris.error(f"‚ùå Erreur audio: {e}")
            return False


class CommandeQuitter(Commande):
    """Commande pour quitter le jeu."""
    
    def execute(self, moteur: MoteurJeu) -> bool:
        """D√©clenche la fin du jeu."""
        # Cette commande sera impl√©ment√©e selon les besoins du moteur
        # Pour l'instant, on retourne toujours True
        return True
